{"version":3,"sources":["/electron/main.ts"],"sourcesContent":["import path from 'node:path';\r\nimport { fileURLToPath } from 'node:url';\r\nimport { app, BrowserWindow, dialog, ipcMain } from 'electron';\r\nimport { readFileSync, writeFileSync } from 'node:fs';\r\n\r\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\r\n\r\nprocess.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true';\r\n// The built directory structure\r\n//\r\n// ├─┬ dist\r\n// │ ├─┬ electron\r\n// │ │ ├── main.js\r\n// │ │ └── preload.js\r\n// │ ├── index.html\r\n// │ ├── ...other-static-files-from-public\r\n// │\r\nprocess.env.DIST = path.join(__dirname, '../dist');\r\nprocess.env.FARM_PUBLIC = app.isPackaged\r\n    ? process.env.DIST\r\n    : path.join(process.env.DIST, '../public');\r\n\r\nif (!app.requestSingleInstanceLock()) {\r\n    app.quit();\r\n    process.exit(0);\r\n}\r\n\r\nlet win: BrowserWindow | null;\r\n\r\nfunction createWindow() {\r\n    win = new BrowserWindow({\r\n        icon: path.join(process.env.FARM_PUBLIC, 'logo.svg'),\r\n        webPreferences: {\r\n            preload: path.join(__dirname, './preload.mjs'),\r\n            nodeIntegration: true,\r\n        },\r\n    });\r\n\r\n    // Test active push message to Renderer-process.\r\n    win.webContents.on('did-finish-load', () => {\r\n        win?.webContents.send(\r\n            'main-process-message',\r\n            new Date().toLocaleString(),\r\n        );\r\n    });\r\n\r\n    if (process.env.FARM_DEV_SERVER_URL) {\r\n        win.loadURL(process.env.FARM_DEV_SERVER_URL);\r\n        win.webContents.openDevTools();\r\n    } else {\r\n        // win.loadFile('dist/index.html')\r\n        win.loadFile(path.join(process.env.DIST, 'index.html'));\r\n    }\r\n}\r\n\r\nipcMain.handle('dialog:open', async () => {\r\n    const result = dialog.showOpenDialogSync({\r\n        properties: ['openFile'],\r\n        filters: [\r\n            {\r\n                name: 'Markdowns',\r\n                extensions: ['md'],\r\n            },\r\n        ],\r\n    });\r\n    return result; // Retorna o resultado da seleção de arquivos/diretórios\r\n});\r\nipcMain.handle('fs:open', async (event: any, path: string) => {\r\n    try {\r\n        const result = readFileSync(path);\r\n\r\n        return result;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n});\r\nipcMain.handle('dialog:create', async (event: any, data: string) => {\r\n    try {\r\n        // Gets the path to create the file\r\n        const createFilePath = dialog.showSaveDialogSync({\r\n            filters: [\r\n                { name: 'Markdown', extensions: ['md'] },\r\n                { name: 'Text File', extensions: ['txt', 'rtf'] },\r\n            ],\r\n        });\r\n\r\n        try {\r\n            const fileCreated = writeFileSync(createFilePath, data, {\r\n                encoding: 'utf8',\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n});\r\n\r\napp.on('window-all-closed', () => {\r\n    app.quit();\r\n    win = null;\r\n});\r\n\r\napp.whenReady().then(createWindow);\r\n"],"names":[],"mappingssB;AACR;AAEgB;AAER;AAUZ;AAGN;AAEI;AAC1B;AACK;AACjB;AAEI;AAEK;AACmB;AACqB;AACzB;AACkB;AACb;AACrB;AACJ;AAGsC;AAGL;AAEjC;AAEqC;AACU;AACf;AACzB;AAEsC;AAC7C;AACJ;AAE8B;AACe;AACzB;AAAC;AAAW;AACf;AACL;AACU;AACM;AAAC;AAAK;AACtB;AACH;AACL;AACO;AACX;AAC6C;AACrC;AAC4B;AAErB;AACK;AACA;AAChB;AACJ;AACmD;AAC3C;AAEiD;AACpC;AACL;AAAQ;AAAwB;AAAC;AAAK;AAAC;AACvC;AAAQ;AAAyB;AAAC;AAAO;AAAM;AAAC;AACnD;AACL;AAEI;AACwD;AAC1C;AACd;AACY;AACA;AAChB;AACY;AACA;AAChB;AACJ;AAE4B;AAChB;AACF;AACV;AAEqB;AAAA;AAAA"}