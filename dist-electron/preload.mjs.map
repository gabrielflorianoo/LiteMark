{"version":3,"sources":["/electron/preload.ts"],"sourcesContent":["import { ipcRenderer, contextBridge } from 'electron';\r\n\r\ncontextBridge.exposeInMainWorld('api', {\r\n    openDialog: () => ipcRenderer.invoke('dialog:open'),\r\n    openFile: (path: string) => ipcRenderer.invoke('fs:open', path),\r\n    saveFile: (data: string) => ipcRenderer.invoke('dialog:create', data),\r\n});\r\n\r\n// --------- Expose some API to the Renderer process ---------\r\ncontextBridge.exposeInMainWorld('ipcRenderer', {\r\n    on(...args: Parameters<typeof ipcRenderer.on>) {\r\n        const [channel, listener] = args;\r\n        return ipcRenderer.on(channel, (event, ...args) =>\r\n            listener(event, ...args),\r\n        );\r\n    },\r\n    off(...args: Parameters<typeof ipcRenderer.off>) {\r\n        const [channel, ...omit] = args;\r\n        return ipcRenderer.off(channel, ...omit);\r\n    },\r\n    send(...args: Parameters<typeof ipcRenderer.send>) {\r\n        const [channel, ...omit] = args;\r\n        return ipcRenderer.send(channel, ...omit);\r\n    },\r\n    invoke(...args: Parameters<typeof ipcRenderer.invoke>) {\r\n        const [channel, ...omit] = args;\r\n        return ipcRenderer.invoke(channel, ...omit);\r\n    },\r\n\r\n    // You can expose other APTs you need here.\r\n});\r\n"],"names":[],"mappingsuC;AACE;AACqB;AACM;AACpE;AAG+C;AACE;AACb;AAEL;AAE3B;AAC+C;AAChB;AACQ;AACvC;AACiD;AAClB;AACS;AACxC;AACqD;AACtB;AACW;AAC1C;AAGJ;AAAA;AAAA"}